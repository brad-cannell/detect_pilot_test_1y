---
title: "Processing MedStar and APS Data for REDCap Upload"
format: html
editor: visual
---

# Imports and Versioning

### Imports:

```{r}
library(readxl)

```

### Versioning

```{r}
print(paste("R:",getRversion()))
print(paste(rep("-",18),collapse=""))
for (package in sort(loadedNamespaces())){
  print(paste(paste(package,":",sep=""),packageVersion(package)))}
```

## Development of Processing Script

### Task Overview

-   REDCap:

    -    REDCap can accept data from both direct upload and API interactions

        -    Direct upload requires CSV format

        -    API allows for CSV, JSON, or XML formats

        -    A "record_id" is required, even when requesting for dynamic numbering

    -   REDCap requires any uploaded data to be compatible with the project **DataDictionary**

        -   DataDictionaries are CSV files, which have columns for `Variable / Field Name`, `Form Name` `Section Header`, `Field Type`, `Field Label`, `Choices, Calculations, OR Slider Labels`, `Field Note`, `Text Validation Type OR Show Slider Number`, and many more options

        -   DataDictionaries may also be uploaded to the REDCap project in the same way as data

        -   DataDictionary fields specifying data validation are optional, but strict - incompatible data is rejected on any attempted upload

-   Existing Data:

    -   Existing data is in XLSX format

    -   

Process Goals:

1.  Extract variable names from existing data to TXT file for ease of manipulating the DataDictionary CSV file in Excel through copy/pasting variables into rows of `Field Name`

2.  Manually set **standardized variable names** in the `Variable / Field Name` section of the DataDictionary

3.  Create and add a unique "Source Index" variable to the DataDictionary to maintain trace-ability of processed data back to the source files

4.  Process source data, utilizing the DataDictionary as a map, to rename and variables

5.  Upload source data to REDCap project utilizing API

MedStar ePCR data was chosen to develop a script to process study data into a REDCap compatible format due to the inclusion of many variables of interest and variety of data formats.

### Reading in the MedStar EPCR Data from XLSX

Columns containing date/time elements have their type specified, to ensure proper formatting on import.

```{r}
medstar_epcr <- read_excel("data/DETECT Shared GRAs/medstar_epcr.xlsx", col_types = c("date", "numeric", "text","text", "text", "text", "date","text", "text", "text", "text","text", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text", "text","text", "text", "text", "text","text","text", "text", "text"))
```

### Goal 1: Write TXT with Column Names

#### Retrieving all column names. 

**Note:** Column 5 ("Patient Age in Years (ePatient.15)") and Column 13("Patient Age (ePatient.15)") appear to be potential duplicates

```{r}
original_cols <- colnames(medstar_epcr)
```

#### Writing TXT file

To facilitate copy/paste entry into Excel (or any CSV editor), all column names should be separated by a newline `"\n"` . R's column names and row names should be excluded, as should quotations around the string variables.

```{r}
write.table(c("record_id",original_cols),file="data/DETECT Shared GRAs/redcap_processing/medstar_epcr_cols.txt", sep="\n",col.names=FALSE,row.names=FALSE,quote=FALSE)
```

### Goal 2: Manually set standardized variable names in the Variable / Field Name section of the DataDictionary

asdf

### Goal 3: Create and add a unique "Source Index" variable to the DataDictionary to maintain trace-ability of processed data back to the source files

d

### Goal 4: Process source data, utilizing the DataDictionary as a map, to rename and variables

asdf

### Goal 5: Upload source data to REDCap project utilizing API
