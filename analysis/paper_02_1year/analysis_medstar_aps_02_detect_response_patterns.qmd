---
title: "Response Patterns"
format: html
#editor: visual
---

# Summary

-   We generated simple frequency statistics of the response patterns for the DETECT tool

-   We generated simple frequency statistics of the co-occurrence of "YES" responses in the DETECT tool variables against the outcome of at least one valid APS allegation at the APS Case Number and Subject level.

-   Comparison of "YES" proportions for each item indicated a statistically significant decrease in "YES" proportion for all DETECT screening items in comparison to the 5-week pilot testing data

-   Over time, the number of screenings increased, but the number of positive screenings remained fairly constant. This resulted in a decrease in the percentage of positive screenings over time in the study period

    -   Most notable increase in completion noted in the four caregiver specific questions, which also appeared to have the most significant decrease in "YES" percentage; next most drastic appeared to be patient condition questions

# Imports

## Library Imports

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(here)
library(lubridate)
library(ggplot2)
```

## Data Imports

We imported the revised MedStar data set, with individual pair data, for processing.

```{r}
medstar <- readRDS(here("data", "02 Shared Folders", "DETECT Shared GRAs", 
                        "merge_aps_medstar",
                "medstar_aps_merged_02_response_based_row_pairs.rds"))
```

We imported the data set which included the case number paired data created from temporal matching of responses to APS case intake windows.

```{r}
case_data <- readRDS(here("data", "02 Shared Folders", "DETECT Shared GRAs",
                            "merge_aps_medstar",
                            "medstar_aps_merged_04_temporal_case_nums.rds"))
```

The proportion of times each item was completed, and the proportion of times each item was completed as "YES" were tabulated in a CSV file for both the 5-week pilot and 1-year follow up. We imported this file.

```{r}
pilot_pattern <- read.csv(here("data", "02 Shared Folders", 
                               "DETECT Shared GRAs", "analysis", "response_patterns_pilot.csv"))
```

## Functions

### Unique Value Summary

A function written in a previous cleaning document was imported. It was written to display counts of each unique observations within a selection of columns.

```{r}
get_unique_value_summary <- function(df,cols){
  
  # Input: 
  #     df (data frame) - original source data frame
  #     cols (list) - list of target column names as strings
  # Output:
  #     unique_summary (data frame) - summary counts of each unique value in
  #           each of the target columns
  
  # Get list of unique values in all target columns
  
  df <- df %>%
    dplyr::mutate(across(everything(), as.character))
  
  val <- unique(as.factor(as.vector(as.matrix(df[cols]))))
  
  # Initialize output data frame with unique value row
  
  unique_summary <- data.frame("value"=val)
  
  # Get counts of unique values in original data frame
  
  for (i in cols){
    
    # utilizes table to get summary count of each column
    
    table <- as.data.frame(table(df[i]))
    
    # sets column names to "value" and "freq"
    
  colnames(table) <- c("value","freq")
  
    # adds count of missing values in each column
  
  table<- add_row(table, value = NA, freq = sum(is.na(df[i])))
  
    # readjusts names of columns to "value" and the name of the target column
  
  colnames(table) <- c("value",i)
  
    # joins table's summary counts to complete the count values
  
    unique_summary <- left_join(unique_summary,table, by="value")
  }
  
  # returns completed, but unordered, data frame
  
  unique_summary
  }
```

### Response Pattern Summary

A convenience function was written to extract the number and percentage of rows which contain values of given factor variables.

```{r}
get_column_pattern <- function(t_df, t_cols, t_response=NULL){
  #
  # Generates a tibble displaying the response pattern in a data frame for 
  # each column. Assumes columns are factor variables
  #
  # Input: 
  #     t_df:       data frame. Data frame desired for analysis
  #     t_cols:     list. List of target column names as strings
  #     t_response: list. List of target responses/levels, for which the
  #                 number of times a variable is the only occurrence of the
  #                 target response in a row, and the percentage of times
  #                 the target response for a variable is the only occurrence
  #                 of the target response in a row, will be calculated.
  #                 Default is Null, which results in omitting this calculation.
  # Output:
  #     summary_df  data frame. Provides the number and percentage completed
  #                 and containing each level of each factor variable.
  
  # Gets the number of rows in the data frame for completed percentage
  
  num_used <- nrow(t_df)
  
  # Extracts the levels of all target columns
  
  t_levels <- unique(as.vector(sapply(t_df[, t_cols], levels)))
  
  # Generates the variables names for the output data frame
  
  summary_groups <- c("COMPLETED", t_levels)
  summary_cols <- c("Variable")
  
  for (t_group in summary_groups){
    t_name <- stringr::str_replace_all(t_group, "( )", "_")
    t_num <- paste("NUM", t_name, sep = "_")
    t_per <- paste("PER", t_name, sep =  "_") 
    summary_cols <- c(summary_cols, t_num, t_per)
  }
  
  # Initiates an empty output data frame
  
  summary_df <- tibble::tibble(!!!summary_cols, .rows = 0, 
                               .name_repair = ~summary_cols)
  
  # Processes for each target column...
  
  for (i in 1:length(t_cols)){
  
    # Extracts the variable content
    
    t_item <- pull(t_df[,t_cols[i]])
    
    # Calculates the number of rows with a value in the target column, and the
    # percentage of rows that contain a value for the target column
    
    completed_num <- sum(!is.na(t_item))
    completed_per <- (completed_num / num_used) * 100
    
    vals <- c(t_cols[i], completed_num, completed_per)
    
    # Calculates the number of rows with a value of a specific level in the 
    # target column, and the percentage of rows with such value (out of the number
    # of rows with a value). Does this for each level.
    
    for (t_level in t_levels){
      t_num <- sum(t_item == t_level, na.rm = TRUE)
      t_per <- (t_num / completed_num) * 100
      vals <- c(vals, t_num, t_per)
    }
    
    # Transposes the list, renames the columns, appends to output data frame
    
    row_vals <- t(vals)
    colnames(row_vals) <- summary_cols
    summary_df <- rbind(summary_df, row_vals)
  }
  
  # Converts all columns except the variable name into numeric type
  
  summary_df <- summary_df %>%
    mutate(across(colnames(summary_df)[colnames(summary_df) != "Variable"],
                  .fns = ~as.numeric(.)))
  
  # If there are target responses...
  
  if(!is.null(t_response)){
    
    # For each target response...
    for (j in 1:length(t_response)){
      
      # Calculates the number of times the target response appears in each row
      
      t_df$n_response <- rowSums(t_df[,t_cols] == t_response[j], na.rm = TRUE)
      
      # Extracts only the observations which had one occurrence of the target 
      # response, sums the number of times each Column contains the only 
      # instance of the target response for a row, and reduces to one value each
      
      temp_df <- t_df %>%
        filter(n_response == 1) %>%
        select(all_of(t_cols)) %>%
        mutate(across(all_of(t_cols), 
                      .fns = ~sum(.x == t_response[j], na.rm = TRUE))
               ) %>%
        slice_head(n = 1)
      
      # The extracted values are transposed so each variable is a row (rather
      # than a column), and strips column and variable names
      
      var_names <- colnames(temp_df)
      temp_df <- t(temp_df)
      rownames(temp_df) <- NULL
      colnames(temp_df) <- NULL
      
      # Initiates a temporary tibble where each row lists the Variable and
      # the number of times the target response appeared only once for the
      # variable, and renames columns appropriately
      
      temp_tbl <- tibble::tibble(var_names, as.vector(temp_df))
      colnames(temp_tbl) <- c("Variable", paste("NUM_ONLY", 
                                                t_response[j], sep = "_"))
      
      # Joins this temporary tibble to the output data frame, matching by
      # Variable name
      
      summary_df <- left_join(summary_df, temp_tbl, by = "Variable")
      
      # Isolates the number of times the target response was selected for
      # each variable, the number of times each variable was the only
      # instance of the target response in a particular row, and
      # the name of the variable. Renames columns
      
      temp_tbl <- summary_df %>%
        select('Variable', paste("NUM", t_response[j], sep = "_"), 
               paste("NUM_ONLY", t_response[j], sep = "_")
               )
      colnames(temp_tbl) <- c("Variable","num", "num_only")
      
      # Calculates the percentage of times the occurrence of the target response
      # in a variable was the only instance of the target response in a
      # single row, renames column names appropriately
      
      temp_tbl <- temp_tbl %>%
        mutate(temp_per = (num_only / num) * 100) %>%
        select('Variable', 'temp_per')
      colnames(temp_tbl) <- c("Variable", paste("PER_ONLY", t_response[j], sep = "_"))
      
      # Appends the new column to the output data frame
      
      summary_df <- left_join(summary_df, temp_tbl, by = "Variable")
    }
  }
  
  # Returns the output data frame
  
  summary_df
}
```

### Outcome Pattern

```{r}
get_occurence_pattern <- function(t_df, t_cols, t_response, t_vars = NULL){
  #
  # Generates a tibble displaying the number of co-occuring values between
  # a target response (occurring in one of the target columns) and a TRUE value
  # in one of the logical target variables
  #
  # Input: 
  #     t_df:       data frame. Data frame desired for analysis
  #     t_cols:     list. List of target column names as strings
  #     t_response: string. Target response occurring in the target columns,
  #                 which is of interest in co-occurrence with TRUE values in
  #                 the target variables.
  #     t_vars:     list. List of target variable names as strings. Logical
  #                 variables of interest for co-occurrence with the target
  #                 response value in the target columns.
  #                 Default is Null, which results in omitting this calculation.
  # Output:
  #     summary_df  data frame. Provides the number and percentage completed,
  #                 with the target response, and co-occurring with each
  #                 target variable

  # Reduces the temporary data frame to only the target columns and variables,
  # converts the target columns into logical booleans indicating if their value
  # matches the target value or not

  t_df <- t_df %>%
    select(all_of(t_cols), all_of(t_vars)
           ) %>%
    mutate(across(all_of(t_cols), .fns = ~.x == t_response))

  # Gets the total number of entries
  
  num_used <- nrow(t_df)
  
  # Generates the variables names for the output data frame
  
  summary_groups <- c("COMPLETED", t_response, t_vars)
  summary_cols <- c("Variable")
  
  for (t_group in summary_groups[1:2]){
    t_name <- toupper(stringr::str_replace_all(t_group, "( )", "_"))
    t_num <- paste("NUM", t_name, sep = "_")
    t_per <- paste("PER", t_name, sep =  "_") 
    summary_cols <- c(summary_cols, t_num, t_per)
    
  }
  
  for (t_group in summary_groups[3:length(summary_groups)]){
    t_name <- toupper(stringr::str_replace_all(t_group, "( )", "_"))
    t_num <- paste("NUM", t_response, t_name, sep = "_")
    t_per <- paste("PER", t_response, t_name, sep =  "_") 
    summary_cols <- c(summary_cols, t_num, t_per)
  }

# Initiates an empty output data frame
  
  summary_df <- tibble::tibble(!!!summary_cols, .rows = 0, 
                               .name_repair = ~summary_cols)
  
  # Processes for each target column...
  
  for (i in 1:length(t_cols)){
  
    # Extracts the variable content, and converts to a logical indicating if
    # the value indicates the target response or not
    
    t_item <- t_df %>%
      select(t_cols[i], all_of(t_vars))
    
    # Calculates the number of rows with a value in the target column, and the
    # percentage of rows that contain a value for the target column
    
    completed_num <- sum(!is.na(t_item[,t_cols[i]]))
    completed_per <- (completed_num / num_used) * 100
    
    # Calculates the number of rows with the target response in the target
    # column, and the percentage of COMPLETED rows (with any value) that are the
    # target response in the target column
    
    response_num <- sum(t_item[,t_cols[i]], na.rm = TRUE)
    response_per <- (response_num / completed_num) * 100
    
    vals <- c(t_cols[i], 
              completed_num, completed_per, 
              response_num, response_per)
    
    # Calculates the number of the rows with the target response in the target
    # column AND a TRUE value in a target variable column, and the percentage
    # of rows with such target value (out of the number of rows with the value)
    # which have the TRUE value in the target variable. Does this for each
    # target variable.
    
    for (j in 1:length(t_vars)){
      t_rows <- pull(t_item[,t_cols[i]])
      t_num <- sum(t_item[t_rows, t_vars[j]], na.rm = TRUE)
      t_per <- (t_num / response_num) * 100
      vals <- c(vals, t_num, t_per)
    }
    
    # Transposes the list, renames the columns, appends to output data frame
    
    row_vals <- t(vals)
    colnames(row_vals) <- summary_cols
    summary_df <- rbind(summary_df, row_vals)
  }
  
  # Converts all columns except the variable name into numeric type
  
  summary_df <- summary_df %>%
    mutate(across(colnames(summary_df)[colnames(summary_df) != "Variable"],
                  .fns = ~as.numeric(.)))  
    
  # Returns the output data frame
  
  summary_df
}
```

# Analysis

## Consolidation of "Reported" Variable

We consolidated our "detect_report_made" variable into a logical variable, wherein a value of "YES" or the presence of a report number would evaluate to TRUE, a value of "NO" without a report number would evaluate to FALSE, and any other response would convert to a missing value.

```{r}
medstar <- medstar %>%
  mutate(detect_report_made = case_when(
    detect_report_made == "YES" ~ TRUE,
    detect_report_made == "NO" & is.na(detect_report_num) ~ FALSE,
    !is.na(detect_report_num) ~ TRUE)
         )

case_data <- case_data %>%
  mutate(detect_report_made = case_when(
    detect_report_made == "YES" ~ TRUE,
    detect_report_made == "NO" & is.na(detect_report_num) ~ FALSE,
    !is.na(detect_report_num) ~ TRUE)
         )

get_unique_value_summary(medstar, 'detect_report_made')
```

We renamed the variables indicating if a report was made, if there was one or more valid allegation in an associated APS Case Number, and if there was one or more valid allegation associated with a subject in the APS data set. This was done for brevity in code for viewing. We also isolated the names of our outcome variables.

```{r}
medstar <- medstar %>%
  rename(reported = detect_report_made,
         valid_case = aps_cases_any_valid,
         valid_subj = aps_subject_any_valid)

case_data <- case_data %>%
  rename(reported = detect_report_made,
         valid_case = aps_cases_any_valid,
         valid_subj = aps_subject_any_valid)

outcome_vars <- medstar %>%
  select(reported, valid_case, valid_subj) %>%
  names()
```

We also made an alternative version of the paired data set for sensitivity analysis. This version eliminated any paired APS Intakes which were not explicitly an "EMS/EMT" reporter.

```{r}
medstar_ems <- medstar %>%
  mutate(aps_row = ifelse(
    aps_reporter != "Health Care Providers/Staff -- EMS/EMT", 
    NA_integer_, 
    aps_row)
    ) %>%
  mutate(valid_case = ifelse(
    aps_reporter != "Health Care Providers/Staff -- EMS/EMT", 
    NA, 
    valid_case))
```

## Selecting Variables

We isolated our DETECT Questionnaire variables into three groups: the variables relating to comments entered into the "Report Number" field that were not strictly a report number, all items of the DETECT Tool, and the screening questions of the DETECT Tool.

```{r}
detect_comment_vars <- medstar %>%
  select(detect_report_comment, detect_report_aps_unable, 
         detect_report_aps_onscene, detect_report_aps_existing, 
         detect_facility, detect_other_reporter, detect_uta
         ) %>%
  names()

detect_questions <- medstar %>%
  select(detect_env_odor, detect_env_hoarding, detect_env_concern, 
         detect_env_isolated, detect_cond_hygiene, detect_cond_clothes, 
         detect_cond_needs, detect_cond_anxious, detect_meds_hoarding, 
         detect_meds_difficulty, detect_caregiver_lack, 
         detect_caregiver_inattentive, detect_caregiver_frustrated, 
         detect_caregiver_anxious) %>%
  names()

detect_items <- medstar %>%
  select(all_of(detect_questions), reported, detect_report_num
         ) %>%
  names()
```

## All Screenings

There were 24,007 Observations with a DETECT screening. This included 15,212 Subjects.

```{r}
screened <- medstar %>%
  filter(detect_screened)

screened_case <- case_data %>%
  filter(detect_screened)

screened_ems <- medstar_ems %>%
  filter(detect_screened)

nrow(screened) 

length(unique(screened$id))
```

We analyzed the response pattern of the DETECT question variables for each of the 24,007 Responses which contained a screening. We were particularly interested in unique occurrences of "YES" responses.

```{r}
get_column_pattern(screened, detect_questions, "YES") %>%
  select(-c(contains("NOT_APPLICABLE")))
```

We also analyzed the pattern of outcomes co-occurring with an answer of "YES" to the DETECT question variables in the 24,007 responses which contained a screening.

```{r}
get_occurence_pattern(screened, detect_questions, "YES", outcome_vars)
```

This pattern was also assessed for the data set with temporally-matched APS Case Numbers.

```{r}
get_occurence_pattern(screened_case, detect_questions, "YES", outcome_vars)
```

This outcome pattern was also assessed for only the explicit "EMS/EMT" reporter type observations, to assess for sensitivity.

```{r}
get_occurence_pattern(screened_ems, detect_questions, "YES", outcome_vars)
```

## Single-Item Screenings

We isolated the screenings which contained only one completed DETECT screening item. There was only one such screening.

```{r}
medstar$na_count <- rowSums (is.na(medstar[,detect_questions]))

single_item <- medstar %>%
  filter(na_count < length(detect_questions)
         ) %>%
  filter(na_count == (length(detect_questions)-1))

nrow(single_item)

length(unique(single_item$id))
```

We examined the responses to the DETECT screening questions. Only the question regarding an environmental odor was selected. There was no APS Subject associated with this response.

```{r}
single_item[, c(detect_questions, outcome_vars)]
```

## Screenings by Report Status

### Report Made

We isolated the 338 screenings that either indicated a report was made, or contained a report number.

```{r}
checking <- screened %>%
  filter(reported)

checking_case <- screened_case %>%
  filter(reported)

checking_ems <- screened_ems %>%
  filter(reported)

nrow(checking)
```

We analyzed the response pattern to all DETECT variables in the subset, with specific interest on answers of "YES".

```{r}
get_column_pattern(checking, detect_questions, "YES") %>%
  select(-c(contains("NOT_APPLICABLE")))
```

We analyzed the outcome pattern associated with "YES" responses to all DETECT variables in the subset.

```{r}
get_occurence_pattern(checking, detect_questions, "YES", outcome_vars)
```

This pattern was also assessed for the data set with temporally-matched APS Case Numbers.

```{r}
get_occurence_pattern(checking_case, detect_questions, "YES", outcome_vars)
```

This outcome pattern was also assessed for only the explicit "EMS/EMT" reporter type observations, to assess for sensitivity.

```{r}
get_occurence_pattern(checking_ems, detect_questions, "YES", outcome_vars)
```

### No Report Made

We then isolated the 23,647 screenings which indicated no report was made, and lacked a report number.

```{r}
checking <- screened %>%
  filter(!reported)

checking_case <- screened_case %>%
  filter(!reported)

checking_ems <- screened_ems %>%
  filter(!reported)

nrow(checking)
```

We analyzed the response pattern to all DETECT variables in the subset, with specific interest on answers of "YES".

```{r}
get_column_pattern(checking, detect_questions, "YES") %>%
  select(-c(contains("NOT_APPLICABLE")))
```

We analyzed the outcome pattern associated with "YES" responses to all DETECT variables in the subset.

```{r}
get_occurence_pattern(checking, detect_questions, "YES", outcome_vars)
```

This pattern was also assessed for the data set with temporally-matched APS Case Numbers.

```{r}
get_occurence_pattern(checking_case, detect_questions, "YES", outcome_vars)
```

This outcome pattern was also assessed for only the explicit "EMS/EMT" reporter type observations, to assess for sensitivity.

```{r}
get_occurence_pattern(checking_ems, detect_questions, "YES", outcome_vars)
```

## Comparison to 2019 5-Week Pilot Study Paper Results

The response patterns were examined in comparison to the response patterns originally identified in the 5-week pilot study, from the 2019 paper. We isolated data relating to the completion status of each item. Proportions were multiplied to generate sufficient cell counts. Chi-square testing for the proportion of times each item was completed in any form yielded p \< 0.001 for all items.

```{r}
completion_pattern <- pilot_pattern %>%
  select(item, all_of(ends_with("_completed"))
         ) %>%
  mutate(pilot_no = 1 - pilot_completed,
         follow_no = 1 - follow_completed) %>%
  mutate(across(where(is.numeric), .fns = ~.x*100000))


for(i in 1:nrow(completion_pattern)){

  # Print DETECT Item
  print(completion_pattern$item[i])
  
  # Separate rows
  pilot_row <- cbind("Completed" = completion_pattern[i,]$pilot_completed,
                 "Not Completed" = completion_pattern[i,]$pilot_no)
  follow_row <- cbind("Completed" = completion_pattern[i,]$follow_completed,
                 "Not Completed" = completion_pattern[i,]$follow_no)
  
  # Make 2x2 table
  contingency_tab <- rbind("Pilot" = pilot_row, "Follow-up" = follow_row)
  
  print(chisq.test(contingency_tab))
}

```

We isolated data relating to times each item was completed as "YES" when it was completed in any form. Proportions were multiplied to generate sufficient cell counts. Chi-square testing for the proportion of times each item was completed with a "YES" yielded p \< 0.001 for all items.

```{r}
yes_pattern <- pilot_pattern %>%
  select(item, all_of(ends_with("_yes"))
         ) %>%
  mutate(pilot_no = 1 - pilot_yes,
         follow_no = 1 - follow_yes) %>%
  mutate(across(where(is.numeric), .fns = ~.x*100000))


for(i in 1:nrow(yes_pattern)){

  # Print DETECT Item
  print(yes_pattern$item[i])
  
  # Separate rows
  pilot_row <- cbind("YES" = yes_pattern[i,]$pilot_yes,
                 "Other Answer" = yes_pattern[i,]$pilot_no)
  follow_row <- cbind("YES" = yes_pattern[i,]$follow_yes,
                 "Other Answer" = yes_pattern[i,]$follow_no)
  
  # Make 2x2 table
  contingency_tab <- rbind("Pilot" = pilot_row, "Follow-up" = follow_row)
  
  print(chisq.test(contingency_tab))
}

```

## Study-Month Trends

We modified our data set to include designation of study month, the number of screenings in each month, and the number of positive screenings in each month.

```{r}
month_trend_data <- case_data %>%
  mutate(study_month = case_when(
    response_dt %within% interval(start = date('2017-02-01'),
                                  end = date('2017-03-01')-dseconds(x=1)) ~ 1,
    response_dt %within% interval(start = date('2017-03-01'),
                                  end = date('2017-04-01')-dseconds(x=1)) ~ 2,
    response_dt %within% interval(start = date('2017-04-01'),
                                  end = date('2017-05-01')-dseconds(x=1)) ~ 3,
    response_dt %within% interval(start = date('2017-05-01'),
                                  end = date('2017-06-01')-dseconds(x=1)) ~ 4,
    response_dt %within% interval(start = date('2017-06-01'),
                                  end = date('2017-07-01')-dseconds(x=1)) ~ 5,
    response_dt %within% interval(start = date('2017-07-01'),
                                  end = date('2017-08-01')-dseconds(x=1)) ~ 6,
    response_dt %within% interval(start = date('2017-08-01'),
                                  end = date('2017-09-01')-dseconds(x=1)) ~ 7,
    response_dt %within% interval(start = date('2017-09-01'),
                                  end = date('2017-10-01')-dseconds(x=1)) ~ 8,
    response_dt %within% interval(start = date('2017-10-01'),
                                  end = date('2017-11-01')-dseconds(x=1)) ~ 9,
    response_dt %within% interval(start = date('2017-11-01'),
                                  end = date('2017-12-01')-dseconds(x=1)) ~ 10,
    response_dt %within% interval(start = date('2017-12-01'),
                                  end = date('2018-01-01')-dseconds(x=1)) ~ 11,
    response_dt %within% interval(start = date('2018-01-01'),
                                  end = date('2018-02-01')-dseconds(x=1)) ~ 12,
    response_dt %within% interval(start = date('2018-02-01'),
                                  end = date('2018-03-01')-dseconds(x=1)) ~ 13
    )) %>%
  group_by(study_month) %>%
  mutate(month_screenings = sum(detect_screened),
         month_positives = sum(detect_positive, na.rm=TRUE)
         ) %>%
  ungroup()
```

We initiated our completion trend data frame, and added the overall month-by-month data.

```{r}
trend_cols <- c("study_month", "completed_num", 
                          "completed_per", "yes_num", "yes_per", "detect_item")

completed_trends <- tibble::tibble(!!!trend_cols, .rows = 0, 
                               .name_repair = ~trend_cols)

base_trend <- month_trend_data %>%
  select(study_month, month_screenings) %>%
  distinct() %>%
  add_column(completed_per = 1, yes_num = NA, yes_per = NA, 
             detect_item = "total screenings")

colnames(base_trend)[2] <- "completed_num"

completed_trends <- rbind(completed_trends, base_trend)

base_trend <- month_trend_data %>%
  select(study_month, month_screenings, month_positives) %>%
  distinct() %>%
  mutate(completed_per = month_positives/month_screenings) %>%
  add_column(yes_num = NA, yes_per = NA, detect_item = "positive screenings") %>%
  select(-month_screenings)

colnames(base_trend)[2] <- "completed_num"

completed_trends <- rbind(completed_trends, base_trend)
```

We completed the additional rows for each DETECT screening item.

```{r}
for (i in 1:length(detect_questions)){

  item_trend <- month_trend_data %>%
    select(study_month, month_screenings, detect_questions[i])
  
  colnames(item_trend)[3] <- "detect_item" 
  
  item_trend <- item_trend %>% 
    group_by(study_month) %>%
    mutate(completed_num = sum(!is.na(detect_item)),
           yes_num = sum(detect_item == "YES", na.rm = TRUE)
           ) %>%
    mutate(completed_per = completed_num / month_screenings,
           yes_per = yes_num / completed_num) %>%
    ungroup() %>%
    select(-detect_item) %>%
    distinct()
  
  colnames(item_trend)[3] <- "completed_num"
  
  item_trend <- item_trend %>%
    select(-month_screenings) %>%
    add_column(detect_item = detect_questions[i])

  completed_trends <- rbind(completed_trends, item_trend)
}
```

The number of screenings performed appeared to increase over the study period, while the number of positive screenings appeared to remain fairly constant, though the percentage of positive screenings appeared to decrease over the study period.

```{r}
completed_trends %>%
  filter(detect_item %in% c("total screenings", "positive screenings")) %>%
  relocate(study_month, detect_item) %>%
  arrange(detect_item, study_month)
```

Completion percentages appear to increase while "YES" percentages appear to decrease over the study months for each DETECT Item.

```{r}
completed_trends %>% 
  relocate(study_month, detect_item) %>%
  arrange(detect_item,study_month)
```

### Plots

#### Overall Completion and "YES" Percentage

We plotted the trend in the number of screenings, and the trend in the number of positive screenings. We saw that the number of screenings completed increased over time, though the number of positive screenings remained fairly constant.

```{r}
plotting_data <- completed_trends %>%
  filter(detect_item %in% c("total screenings", "positive screenings"))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_num)) + geom_line(aes(colour=detect_item))
```

We plotted the trend in the percentage of positive screenings. We saw that the percentage of positive screenings experienced a negative trend over time.

```{r}
plotting_data <- completed_trends %>%
  filter(detect_item %in% c("positive screenings"))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_per)) + geom_line(aes(colour=detect_item))
```

We plotted the completion percentage rates. We see that the most commonly completed items were fairly constant in their completion rates, while the less frequently completed items (primarily caregiver related questions) increased over time.

```{r}
plotting_data <- completed_trends %>%
  filter(!(detect_item %in% c("positive screenings", "total screenings")))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_per)) + geom_line(aes(colour=detect_item))
```

We plotted the "YES" percentage rates. We see that the most commonly completed items wildly fluctuated in their "YES" rates, though overall trends appeared to indicate a decrease in "YES" response frequencies.

```{r}
plotting_data <- completed_trends %>%
  filter(!(detect_item %in% c("positive screenings", "total screenings")))

ggplot(data = plotting_data, 
       aes(x=study_month, y=yes_per)) + geom_line(aes(colour=detect_item))
```

#### Plots for Specific Questions

##### Caregiver Questions

The completion rate of the caregiver DETECT items appeared to have a notable increase at the 5-month mark.

```{r}
plotting_data <- completed_trends %>%
  filter((detect_item %in% 
            c("detect_caregiver_inattentive", "detect_caregiver_lack",
              "detect_caregiver_frustrated", "detect_caregiver_anxious")))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_per)) + geom_line(aes(colour=detect_item))
```

The decline in the "YES" percentage for the caregiver DETECT screening items had a consistent negative trend, most notably in the "If caregiver is present, they appear to lack knowledge of the patient or older adult's medical needs" item.

```{r}
ggplot(data = plotting_data, 
       aes(x=study_month, y=yes_per)) + geom_line(aes(colour=detect_item))
```

##### Environment Questions

The completion rate of the environment DETECT items appeared to be fairly consistent, and nearly absolute across screenings.

```{r}
plotting_data <- completed_trends %>%
  filter((detect_item %in% 
            c("detect_env_odor", "detect_env_hoarding", "detect_env_concern",
              "detect_env_isolated")))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_per)) + geom_line(aes(colour=detect_item))
```

The decline in the "YES" percentage for the environment DETECT screening items appeared to be fairly consistent, with "Unusual odor (e.g., urine, feces)" consistently having the highest rate of "YES" responses and "Is the patient or older adult isolated in the home?" the least. There was a notable down-tick in "YES" responses to all of these items in the 11th study month.

```{r}
ggplot(data = plotting_data, 
       aes(x=study_month, y=yes_per)) + geom_line(aes(colour=detect_item))
```

##### Medication Questions

The completion rate of the medication DETECT items appeared to have nearly identical completion rates, a positive trend in completion percentage, and notable down-tick in completion in the 4th study month.

```{r}
plotting_data <- completed_trends %>%
  filter((detect_item %in% 
            c("detect_meds_difficulty", "detect_meds_hoarding")))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_per)) + geom_line(aes(colour=detect_item))
```

The decline in the "YES" percentage for the medication DETECT screening items appeared to be fairly consistent, with "Does the patient or older adult have difficulties taking their prescribed medications as directed?" consistently having the highest rate of "YES" responses and "Does the patient or older adult appear to be hoarding or saving old medications?" the least. There was a notable down-tick in "YES" responses to both of these items in the 9th and 11th study month, and up-tick in "YES" responses to both of these items around the 5th study month.

```{r}
ggplot(data = plotting_data, 
       aes(x=study_month, y=yes_per)) + geom_line(aes(colour=detect_item))
```

##### Patient Condition Questions

The completion rate of the patient condition DETECT items appeared to fairly consistent completion rates, a positive trend in completion percentage, nearly identical completion rates after the 5th study month, and notable down-tick in completion in the 5th and 8th study month.

```{r}
plotting_data <- completed_trends %>%
  filter((detect_item %in% 
            c("detect_cond_needs", "detect_cond_hygiene", 
              "detect_cond_clothes", "detct_cond_anxious")))

ggplot(data = plotting_data, 
       aes(x=study_month, y=completed_per)) + geom_line(aes(colour=detect_item))
```

The decline in the "YES" percentage for the patient condition DETECT screening items appeared to have a general downtrend, with "Does the patient or older adult have poor personal hygiene (including soiled in urine or feces)?" consistently having the highest rate of "YES" responses and "Is the patient or older adult inadequately clothed or wearing dirty, torn, or soiled clothing?" the least. There was a notable down-tick in "YES" responses to both of these items in the 8th and 11th study month.

```{r}
ggplot(data = plotting_data, 
       aes(x=study_month, y=yes_per)) + geom_line(aes(colour=detect_item))
```
