---
title: "Merge APS and MedStar"
format: html
#editor: visual
---

# Summary

-   Both data sets were slightly modified and exported

    -   The APS data set was reordered

    -   The MedStar data set recieved 7 new variables and was reordered

        -   If screening was performed, if screening was positive, number of responses for the subject, number of paired APS intakes for the subject, the number of APS Cases associated with the paired Intakes for the subject, the earliest response date, the latest response date

-   Patient identifiers were present in both data sets

    -   Patient Address County was the only variable kept from the APS data set when collapsing to a single row

-   A merged data set containing all rows from both data sets was created

    -   This was created to facilitate creating a "Timeline" of all data points from each subject

    -   APS Rows were given the Event Type of "APS Intake"; MedStar Rows were given the Event Type of "MedStar Response"

    -   The APS Intake Date/Time was selected as the event from the APS data; The Response Date/Time was selected as the event from the MedStar data

-   A merged data set containing all rows from the MedStar data set, with any paired APS row data appended in the same row was created

    -   This was created to facilitate analysis of a single MedStar Response and its associated APS Intake

-   A merged data set containing a single row per subject, containing only subject-wide aggregate data for each subject in the MedStar data set (and associated subject-wide data from the APS data set, if present) was created

-   A merged data set containing additional APS Case Number temporal matching was created

# Imports

## Library Imports

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(here)
library(lubridate)
```

## Data Imports

We imported the revised MedStar data set for processing.

```{r}
medstar <- readRDS(here("data", "02 Shared Folders", "DETECT Shared GRAs", 
                        "medstar_cleaning", "medstar_03.rds"))
```

We imported the revised APS data set for processing.

```{r}
aps <- readRDS(here("data", "02 Shared Folders", "DETECT Shared GRAs", 
                    "aps_cleaning", "aps_05.rds"))
```

We imported the APS Intake-MedStar Response merge pattern for processing.

```{r}
row_pattern <- readRDS(here("data", "02 Shared Folders", "DETECT Shared GRAs",
                            "merge_aps_medstar", 
                            "medstar_aps_full_row_map_01.rds"))
```

# Ordering Columns in Original Data Sets

## APS

We isolated variables from the APS data set into groups.

```{r}
universal_id_vars <- aps %>%
  select(id, aps_person_id, ms_id, aps_case_num, aps_row, 
         ms_epcr_row, ms_comp_row) %>%
  names()

aps_pt_vars <- aps %>%
  select(starts_with("pt_")) %>%
  names()

aps_event_vars <- aps %>%
  select(aps_intake_dt, aps_intake_date, aps_intake_time, aps_intake_year, 
         aps_intake_month, aps_intake_day) %>%
  names()

aps_inv_vars <- aps %>%
  select(aps_intake_num, aps_inv_num, aps_inv_close_dt, aps_inv_close_date, aps_inv_close_time,
         aps_inv_close_year, aps_inv_close_month, aps_inv_close_day) %>%
  names()

aps_row_vars <- aps %>%
  select(aps_reporter, aps_inv_close_reason, all_of(starts_with("aps_rows_"))
         ) %>%
  names()

aps_case_vars <- aps %>%
  select(starts_with("aps_cases_")) %>%
  names()

aps_subj_vars <- aps %>%
  select(starts_with("aps_subject_")) %>%
  names()
```

We ordered the columns of our APS data set to facilitate additional analyses and merges.

```{r}
aps_cols <- c(universal_id_vars, aps_event_vars, aps_pt_vars, aps_row_vars, 
              aps_case_vars, aps_subj_vars, aps_inv_vars)

aps <- aps[,aps_cols]#
```

We saved the revised data set for later use.

```{r}
# saveRDS(aps, here("data", "02 Shared Folders", "DETECT Shared GRAs",
#                   "aps_cleaning", "aps_06.rds"))
```

## MedStar

We identified DETECT variables to determine if a screening was positive (at least one "YES" for a screening item) or if a screening was performed at all (any value in a DETECT variable).

```{r}
detect_comment_vars <- medstar %>%
  select(detect_report_comment, detect_report_aps_unable, 
         detect_report_aps_onscene, detect_report_aps_existing, 
         detect_facility, detect_other_reporter, detect_uta
         ) %>%
  names()

detect_questions <- medstar %>%
  select(starts_with("detect_")
         ) %>%
  select(-all_of(c(detect_comment_vars))
         ) %>%
  names()

detect_items <- detect_questions[
  !(detect_questions %in% c('detect_report_made', 'detect_report_num'))]

```

We created two new variables which contained the determination of if a screening was performed, and if the screening was positive, for each observation.

```{r}
ms_modified <- medstar

ms_modified$na_count <- rowSums(is.na(ms_modified[,detect_items]))

ms_modified <- ms_modified %>%
  mutate(across(all_of(detect_items),
         ~ case_when(.x == "YES" ~ TRUE,
                     .x == "NO" ~ FALSE,
                     .x == "UNABLE TO ASSESS" ~ NA)
                )
         )

ms_modified$yes_count <- rowSums(ms_modified[,detect_items], na.rm=TRUE)

ms_modified <- ms_modified %>%
  mutate(detect_screened = ifelse(na_count < length(detect_items), TRUE, FALSE),
         detect_positive = case_when(!detect_screened ~ NA,
                                     detect_screened & yes_count > 0 ~ TRUE,
                                     detect_screened & yes_count < 1 ~ FALSE)
         ) %>%
  select(ms_epcr_row, detect_screened, detect_positive)

medstar <- left_join(medstar, ms_modified, by = 'ms_epcr_row')
```

We added variables to the MedStar data set to total the number of Responses and APS Case Numbers associated with each Subject in the MedStar data set.

```{r}
medstar <- medstar %>%
  group_by(id) %>%
  mutate(ms_subj_num_responses = n_distinct(response_pcr),
         ms_subj_num_paired_intakes = n_distinct(aps_row, na.rm=TRUE),
         ms_subj_num_paired_cases = n_distinct(aps_case_num, na.rm=TRUE),
         ms_subj_earliest = min(response_dt),
         ms_subj_latest = max(response_dt)
         ) %>%
  ungroup()
```

We isolated variables from the MedStar data set into groups.

```{r}
ms_pt_vars <- medstar %>%
  select(starts_with("pt_")) %>%
  names()

ms_event_vars <- medstar %>%
  select(response_dt, response_date, response_time, response_year,
         response_month, response_day) %>%
  names()

ms_resp_front_vars <- medstar %>%
  select(response_complaint, response_dispo) %>%
  names()

ms_resp_detail_vars <- medstar %>%
  select(all_of(starts_with("ms_subj")), response_num, response_pcr,
         response_symptoms, response_ems_epcr_sig) %>%
  names()

ms_detect_vars <- medstar %>%
  select(starts_with("detect_")) %>%
  names()

ms_comp_vars <- medstar %>%
  select(starts_with("comp_")) %>%
  names()
```

We ordered the columns of our MedStar data set to facilitate additional analyses and merges.

```{r}
ms_cols <- c(universal_id_vars, ms_event_vars, ms_pt_vars, ms_resp_front_vars, 
              ms_detect_vars, ms_resp_detail_vars, ms_comp_vars)

medstar <- medstar[,ms_cols]
```

We saved the revised data set for later use.

```{r}
# saveRDS(medstar, here("data", "02 Shared Folders", "DETECT Shared GRAs",
#                       "medstar_cleaning", "medstar_04.rds"))
```

# Modification of Patient Identifier Variables

To appropriately merge the data sets, the patient identifier variables were made uniform between the data sets.

```{r}
pt_vars <- unique(c(ms_pt_vars, aps_pt_vars))

pt_vars
```

There were three Patient Identifiers present in the MedStar data set that were missing in the APS Data Set: pt_name_middle, pt_race, pt_hispanic, pt_gender, and pt_address_state. These variables were added to the APS data set as missing values, and the data set was reordered.

```{r}
setdiff(pt_vars, aps_pt_vars)

aps <- aps %>%
  add_column(pt_name_middle = NA_character_, pt_race = NA_character_, 
             pt_hispanic = NA, pt_gender = NA_character_, 
             pt_address_state = NA_character_) %>%
  relocate(all_of(universal_id_vars), all_of(aps_event_vars), all_of(pt_vars))
```

The only Patient Identifier present in the APS data set that was missing in the MedStar data set was pt_address_county. This variable was added to the MedStar data set as a missing value, and the data set was reordered.

```{r}
setdiff(pt_vars, ms_pt_vars)

medstar <- medstar %>%
  add_column(pt_address_county = NA_character_) %>%
  relocate(all_of(universal_id_vars), all_of(ms_event_vars), all_of(pt_vars))
```

# Merges

## 1. Subject-Wise Timeline Merge

A data set which combined all observations of both data sets was created, in order to facilitate the creation of a "timeline" for all observations for each subject across both data sets.

The overall merge variables from each set were selected and ordered.

```{r}
aps_timeline_merge_cols <- c(aps_row_vars, aps_case_vars, aps_subj_vars, 
                             aps_inv_vars)

ms_timeline_merge_cols <- c(ms_resp_front_vars, ms_detect_vars, 
                            ms_resp_detail_vars, ms_comp_vars)

event_vars <- c("event_type", "event_dt", "event_date", "event_time", 
                "event_year", "event_month", "event_day")

timeline_cols <- c(universal_id_vars, event_vars, pt_vars, ms_resp_front_vars, 
                   ms_detect_vars, aps_row_vars, aps_case_vars, aps_subj_vars, 
                   aps_inv_vars, ms_resp_detail_vars, ms_comp_vars)
```

### APS

The event type variable was added as "APS Intake" for all rows. The MedStar specific variables were added as missing values. MedStar Row numbers were converted to missing values.

```{r}
aps_modified <- aps %>%
  add_column(event_type = "APS Intake") %>%
  mutate(!!!setNames(rep(NA_character_, 
                         length(ms_timeline_merge_cols)), 
                         ms_timeline_merge_cols
                     )
         ) %>%
  mutate(ms_epcr_row = NA_integer_,
         ms_comp_row = NA_integer_) %>%
  relocate(all_of(universal_id_vars), event_type, 
           all_of(aps_event_vars), all_of(pt_vars))
```

We renamed the event variables for these APS Intakes.

```{r}
aps_modified <- aps_modified %>%
    rename(event_dt = aps_intake_dt, event_date = aps_intake_date, 
         event_time = aps_intake_time, event_year = aps_intake_year,
         event_month = aps_intake_month, event_day = aps_intake_day)
```

### MedStar

The event type variable was added as "MedStar Response" for all rows. The APS specific variables were added as missing values. APS Row numbers were converted to missing values.

```{r}
ms_modified <- medstar %>%
  add_column(event_type = "MedStar Response") %>%
  mutate(!!!setNames(rep(NA_character_, 
                         length(aps_timeline_merge_cols)), 
                         aps_timeline_merge_cols
                     )
         ) %>%
  mutate(aps_row = NA_integer_) %>%
  relocate(all_of(universal_id_vars), event_type, 
           all_of(ms_event_vars), all_of(pt_vars))
```

We renamed the event variables for these MedStar Responses.

```{r}
ms_modified <- ms_modified %>%
    rename(event_dt = response_dt, event_date = response_date, 
         event_time = response_time, event_year = response_year,
         event_month = response_month, event_day = response_day)
```

### Merge

We merged the data sets, and arranged both our observations and variables.

```{r}
merged_set <- rbind(ms_modified, aps_modified) %>%
  arrange(id, event_dt)

merged_set <- merged_set[,timeline_cols]
```

We saved and exported this data set.

```{r}
# saveRDS(merged_set, here("data", "02 Shared Folders", "DETECT Shared GRAs", 
#                          "merge_aps_medstar",
#                          "medstar_aps_merged_01_timeline_all_rows.rds"))
```

## 2. All Responses, Adding Paired Intake Data

A data set which added the APS data to any paired MedStar Response was created.

The overall merge variables from each set were selected and ordered.

```{r}
row_merge_cols <- c(universal_id_vars, ms_event_vars, pt_vars, 
                    ms_resp_front_vars, ms_detect_vars, aps_row_vars, 
                    aps_case_vars, aps_subj_vars, aps_inv_vars, aps_event_vars, 
                    ms_resp_detail_vars, ms_comp_vars)
```

We modified our MedStar Data set to eliminate the empty "pt_address_county" variable, and the APS Data Set to exclude any other patient identifier variable. We generated a simple key between the two data sets, consisting of both the MedStar Response and APS Intake.

```{r}
ms_modified <- medstar %>%
  mutate(key = paste(ms_epcr_row, aps_row, sep=", ")) %>%
  select(-c(pt_address_county))

aps_modified <- aps %>%
  mutate(key = paste(ms_epcr_row, aps_row, sep=", ")
         ) %>%
  select(-c(all_of(universal_id_vars), all_of(ms_pt_vars)))
```

The APS Intakes with a match in the MedStar data set were added to their paired MedStar Responses.

```{r}
merged_set <- left_join(ms_modified, aps_modified, by="key") %>%
  select(-c(key))

merged_set <- merged_set[,row_merge_cols]
```

We isolated the APS Intakes associated with a Subject present in both data sets. We similarly isolated the variables which represented the aggregate total of all data associated with the subject across all associated MedStar Responses. We reduced the data set to a single row per Subject, and excluded the unnecessary Row and Case identifiers.

```{r}
aps_subj_vars <- aps %>%
  select(starts_with("aps_subject")
         ) %>%
  names()

aps_modified <- aps %>%
  select(all_of(universal_id_vars), all_of(aps_subj_vars)
         ) %>%
  filter(!is.na(ms_id)) %>%
  group_by(id) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(-c(aps_case_num, aps_row, ms_epcr_row, ms_comp_row))
```

We utilized this to update subject-level data across all observations in the merged data set.

```{r}
merged_set <- rows_update(merged_set, aps_modified, 
                          by=c('id', 'aps_person_id', 'ms_id'))
```

We also copied the column order for a later data set.

```{r}
column_order <- colnames(merged_set)
```

We saved and exported this data set.

```{r}
# saveRDS(merged_set, here("data", "02 Shared Folders", "DETECT Shared GRAs", 
#                          "merge_aps_medstar",
#                 "medstar_aps_merged_02_response_based_row_pairs.rds"))
```

## 3. Subjects in Aggregate, Single Row per Subject

We isolated the APS Intakes associated with a Subject present in both data sets. We similarly isolated the variables which represented the aggregate total of all data associated with the subject across all associated MedStar Responses. We reduced the data set to a single row per Subject, and excluded the unnecessary Row and Case identifiers.

```{r}
aps_subj_vars <- aps %>%
  select(starts_with("aps_subject")
         ) %>%
  names()

aps_modified <- aps %>%
  select(all_of(universal_id_vars), all_of(aps_subj_vars)
         ) %>%
  filter(!is.na(ms_id)) %>%
  group_by(id) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(-c(aps_case_num, aps_row, ms_epcr_row, ms_comp_row))
```

We identified the DETECT specific variables in the MedStar data set, which would require additional processing to present as an aggregate per subject.

```{r}
detect_comment_vars <- medstar %>%
  select(detect_report_comment, detect_report_aps_unable, 
         detect_report_aps_onscene, detect_report_aps_existing, 
         detect_facility, detect_other_reporter, detect_uta
         ) %>%
  names()

detect_questions <- medstar %>%
  select(starts_with("detect_")
         ) %>%
  select(-c(all_of(detect_comment_vars), 'detect_screened', 'detect_positive')
         ) %>%
  names()

detect_items <- detect_questions[
  !(detect_questions %in% c('detect_report_made', 'detect_report_num'))]

detect_cols <- ms_detect_vars[!(ms_detect_vars %in% 
                                  c('detect_report_num',
                                    'detect_report_comment'))]

detect_factors <- detect_cols[!(detect_cols %in% 
                                  c('detect_screened', 'detect_positive'))]
```

In the MedStar data set, we converted any "Unable to Assess" DETECT item to a missing value, which allowed us to sum the total of "YES" responses for each detect item across all encounters for a subject, including the number of screens and positive screens. We reduced the data set to a single row per Subject, and excluded the unnecessary Row and Case Identifiers, as well as any other variables which were specific to individual Responses.

```{r}
ms_modified <- medstar

ms_modified <- ms_modified %>%
  mutate(across(all_of(detect_factors),
         ~ case_when(.x == "YES" ~ TRUE,
                     .x == "TRUE" ~ TRUE,
                     .x == "NO" ~ FALSE,
                     .x == "UNABLE TO ASSESS" ~ NA,
                     is.na(.x) ~ NA)
                ) 
         ) %>%
  group_by(id) %>%
  mutate(across(c(all_of(detect_cols)),
                ~ sum(.x, na.rm=TRUE)
                )
         ) %>%
  slice_head(n = 1) %>%
  ungroup() %>%
  select(id, ms_id, aps_person_id, all_of(detect_cols), 
         all_of(starts_with("ms_subj")))
```

We identified and ordered our desired variables for the merged set.

```{r}
subj_merged_cols_ids <- ms_modified %>%
  select(id, ms_id, aps_person_id) %>%
  names()

ms_subj_detail_cols <- ms_modified %>%
  select(starts_with("ms_subj")) %>%
  names()

aps_subj_detail_cols <- aps_modified %>%
  select(aps_subject_any_valid, aps_subject_none, aps_subject_reporter_ems, 
         aps_subject_reporter_health, aps_subject_num_intakes, 
         aps_subject_num_cases, aps_subject_earliest, aps_subject_latest) %>%
  names()

subj_merged_cols <- c(subj_merged_cols_ids, detect_cols, aps_subj_detail_cols, 
                      ms_subj_detail_cols)
```

We merged the APS and MedStar data sets, and applied our desired column order.

```{r}
merged_set <- full_join(ms_modified, aps_modified, by=c('id','ms_id','aps_person_id'))
merged_set <- merged_set[,subj_merged_cols]
```

We saved and exported this data set.

```{r}
# saveRDS(merged_set, here("data", "02 Shared Folders", "DETECT Shared GRAs", 
#                          "merge_aps_medstar",
#                          "medstar_aps_merged_03_single_subject_per_row.rds"))
```

## 4. Case-Number Association Based

We re-imported our data sets to perform specific filtering and matching in this data set.

```{r}
medstar <- readRDS(here("data", "02 Shared Folders", "DETECT Shared GRAs", 
                      "medstar_cleaning", "medstar_04.rds"))

aps <- readRDS(here("data", "02 Shared Folders","DETECT Shared GRAs", 
                  "aps_cleaning", "aps_06.rds"))
```

### Filtering of Source Data Sets

#### IDs in Both Data Sets

We filtered our MedStar and APS data set to only include subjects present in both data sets. This reduced our search space to 1,967 subjects in both data sets, across 5,490 MedStar responses and 4,188 APS Intakes.

```{r}
medstar_ids <- unique(medstar$id)

aps_ids <- unique(aps$id)

medstar_set <- medstar %>%
  filter(id %in% aps_ids) %>%
  mutate(aps_case_num = NA_integer_)

nrow(medstar_set)
length(unique(medstar_set$id))

aps_set <- aps %>%
  filter(id %in% medstar_ids)

nrow(aps_set)
length(unique(aps_set$id))
```

#### APS Intakes *After* Any Potential MedStar Response

For an APS Intake to have a valid MedStar Response, the MedStar Response must precede the APS Intake. In order to filter by this metric, we isolated the single earliest MedStar Response for each subject within the MedStar data set.

```{r}
nrow(medstar)
length(unique(medstar$id))

ms_earliest <- medstar_set %>%
  group_by(id) %>%
  slice_min(order_by = response_dt, with_ties = FALSE) 

nrow(ms_earliest)
length(unique(ms_earliest$id))
```

We excluded any Intakes that occurred prior to the earliest MedStar Response for each subject. This reduced our APS data set to 1,747 Intakes across 1,376 APS Case Numbers and 1,064 APS Person IDs.

```{r}
aps_set <- aps_set %>%
  rowwise() %>% 
  filter(aps_intake_dt > ms_earliest[ms_earliest$id==id,]$response_dt) %>%
  ungroup()

nrow(aps_set)
length(unique(aps_set$aps_case_num))
length(unique(aps_set$id))
```

#### Refining to Single APS Intake per Case Number

We removed the Intake specific data from each row, and isolated each row to only contain the APS Case-Number level data. This reduced our APS search space to 1,376 rows, each containing a unique APS Case Number, across 1,064 Subjects.

```{r}
aps_cases <- aps_set %>%
  select(-all_of(starts_with("aps_rows_"))
         ) %>%
  group_by(aps_case_num) %>%
  slice_head(n=1) %>%
  ungroup()

nrow(aps_cases)
length(unique(aps_cases$id))
length(unique(aps_cases$aps_case_num))
```

#### APS Cases Within 30 Days of MedStar Response

We modified the APS case data set to include a calculated Case Window between the earliest and latest intake associated with the APS Case Number. We then assessed for any and all MedStar responses referring to the same subject which were temporally associated with the APS Case Numbers. For an APS Case to be considered temporally associated with a MedStar response, the APS Case Window was required to overlap with the 30 day period that began at the response date and time. If there were multiple APS Cases potentially associated with a single MedStar response for a subject, the earliest (temporally closest) APS Case Number was selected.

```{r}
aps_cases <- aps_cases %>%
  mutate(case_window = interval(start = aps_cases_earliest, 
                                end = aps_cases_latest))

for (i in 1:nrow(medstar_set)){
  
  t_row <- medstar_set[i,]
  t_id <- t_row$id
  
  if (t_id %in% aps_cases$id){
    
    window <- interval(start = t_row$response_dt, 
                       end = t_row$response_dt + ddays(30))
    
    case_data <- aps_cases %>%
      filter(id == t_id & int_overlaps(case_window, window))
    

    if(nrow(case_data) == 1){
      medstar_set[i,]$aps_case_num <- case_data$aps_case_num
    }
    
    if(nrow(case_data) > 1){
      case_data <- case_data %>%
        arrange(aps_cases_earliest) %>%
        slice_head(n=1)
      
      medstar_set[i,]$aps_case_num <- case_data$aps_case_num
    }
    
    
  }
  
}

```

### Merging

#### Adding APS-Case Numbers

We isolated the APS Case Numbers and associated variables into a map. We utilized this map to add APS Case Number values to rows which were missing a value for an APS Case Number.

```{r}
case_map <- medstar_set %>%
  select(id, ms_epcr_row, aps_case_num)

medstar_merged <- rows_patch(medstar, case_map, by=c("id","ms_epcr_row"))
```

We then isolated the values associated with each APS Case Number, and merged these values into the MedStar data set for each matching APS Case Number.

```{r}
aps_cases <- aps_cases %>%
  select(aps_case_num, all_of(starts_with("aps_cases_"))) %>%
  distinct()

medstar_merged <-left_join(medstar_merged, aps_cases, by="aps_case_num")
```

#### Adding Subject-Level Data

We isolated the values associated with each APS Subject on the aggregate subject level, and merged these values into the MedStar data set.

```{r}
aps_subject <- aps_set %>%
  select(aps_person_id, all_of(starts_with("aps_subject_"))) %>%
  distinct()

medstar_merged <- left_join(medstar_merged, aps_subject, by="aps_person_id")
```

#### Adding Row-Specific Data

We isolated the APS Intake specific data, and added it to the MedStar data set for each directly paired Intake.

```{r}
aps_row <- aps %>%
  select(aps_row, all_of(starts_with("aps_rows_")), all_of(starts_with("aps_inv_")), all_of(starts_with("aps_intake_")),
         aps_reporter, pt_address_county) %>%
  distinct()

medstar_merged <- left_join(medstar_merged, aps_row, by="aps_row")
```

### Ordering Columns

We applied the previously saved column order.

```{r}
medstar_merged <- medstar_merged[,column_order]
```

### Save and Export

We exported this merged data set for further analysis.

```{r}
saveRDS(medstar_merged, here("data", "02 Shared Folders", "DETECT Shared GRAs", 
                             "merge_aps_medstar",
                         "medstar_aps_merged_04_temporal_case_nums.rds"))
```
