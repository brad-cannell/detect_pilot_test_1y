---
title: "MedStar Codebook Creation"
format: html
editor: visual
---

# Summary

-   List variables were converted into counts for presentation without revealing PHI
-   Boolean/Logical variables were converted into factors and ordered
    -   `pt_hispanic`, `pt_homeless`, `detect_report_aps_unable`, `detect_report_aps_onscene`, `detect_report_aps_existing`, `detect_facility`, `detect_other_reporter`, `detect_uta`
-   Un-ordered factor variables were ordered for presentation
    -   `pt_race`, `comp_report_method`
-   Variables that would cause PHI to be revealed, even when presented in aggregate, were identified and blocked from revealing values in summary statistics
-   Sources were attached to variables in aggregate

# Imports

## Library Imports

```{r}
#| message: false
#| warning: false

library(tidyverse)
library(codebookr)
library(here)
library(stringr)
```

## Data Imports

The composite MedStar data set was imported.

```{r}
ms_data <- readRDS(here("data","DETECT Shared GRAs", "medstar_cleaning",
                             "medstar_01.rds"))
```

# Initial Data Structure

Our MedStar data contained 28228 observations of 68 variables. There were 16578 unique subject IDs, and no duplicate PCR Reports.

```{r}
dim(ms_data)

length(unique(ms_data$ms_id))
sum(is.na(ms_data$ms_id))

```

There was a unique value for `ms_epcr_row` (row number in original MedStar ePCR source data) for each observation, and no observations lacking a value for this variable.

```{r}
length(unique(ms_data$ms_epcr_row))
sum(is.na(ms_data$ms_epcr_row))
```

There were 110 unique values for `ms_comp_row` (row number in original MedStar Compliance source data), without duplicates. There were 28118 observations without any data for this variable, as there was not a matching observation in the MedStar Compliance source data set.

```{r}
length(unique(ms_data$ms_comp_row)) - 1
sum(duplicated( 
        (ms_data %>% 
           filter (!is.na(ms_comp_row)))$ms_comp_row ) 
    )
sum(is.na(ms_data$ms_comp_row))
```

# Data Modification for Codebook

We refined our data for codebook purposes.

## List Variables

We cannot perform summary statistics of our List Columns (`comp_report_num_list` and `comp_report_created_list`). We converted our list variables into numeric values, which indicated the length of the list within each variable.

```{r}
ms_data <- ms_data %>%
  mutate(comp_report_num_list = case_when (is.na(comp_report_num_list) ~ 0,
                                           comp_report_num_list == "NULL" ~ 0,
                                           TRUE ~ lengths(comp_report_num_list)
                                           )
  ) %>%
  mutate(comp_report_created_list = case_when (
    is.na(comp_report_created_list) ~ 0, 
    comp_report_created_list == "NULL" ~ 0, 
    TRUE ~ lengths(comp_report_created_list)
    )
  ) %>%
  mutate(
    comp_report_num_list = na_if(comp_report_num_list, 0),
    comp_report_created_list = na_if(comp_report_created_list, 0)
  )
```

## Ordering Factors

The vast majority of the factor variables within our data did not need to be ordered. However, the clarity of a codebook benefited from ordering these factors.

### Boolean/Logical Variables

We converted all Boolean Variables to ordered factors, so that their presentation in the codebook would be uniform and conform to the overall style of the codebook

```{r}
boolean_vars <- ms_data %>%
  select(pt_hispanic, pt_homeless, detect_report_aps_unable, 
         detect_report_aps_onscene, detect_report_aps_existing, 
         detect_facility, detect_other_reporter, detect_uta) %>%
  names()

bool_levels <- c("True", "False")

ms_data <- ms_data %>%
  mutate(across(all_of(boolean_vars),
                ~ case_when(is.na(.) ~ "NULL",
                           . == TRUE ~ "True",
                           . == FALSE ~ "False"))
         ) %>%
  mutate(across(all_of(boolean_vars), ~na_if(.,"NULL"))
         ) %>%
  mutate(across(all_of(boolean_vars),
                ~factor(.x, ordered = TRUE, levels = bool_levels)
                )
         )

```

### Race `pt_race`

Race was ordered based on the [US Census Presentation of race options](https://www.census.gov/topics/population/race/about.html).

```{r}
races <- c("White", "Black or African American","American Indian or Alaska Native", "Asian", "Native Hawaiian or Other Pacific Islander", "Multiracial", "Other Race")

ms_data <- ms_data %>% 
  mutate(pt_race = factor(pt_race,ordered=TRUE, levels=races)
         )
```

### Report Method `comp_report_method`

Character values for Report Method were converted into Title Case, then converted into an ordered factor for display in the codebook.

```{r}
report_levels <- c("Electronic", "Telephone", "Both Electronic And Telephone","Other - Not Specified")

ms_data$comp_report_method <- str_to_title(ms_data$comp_report_method) 
ms_data$comp_report_method <- factor(ms_data$comp_report_method, ordered = TRUE, levels = report_levels)

```

# Aggregate Modifications

We grouped our variables, where possible, to facilitate ease of adding attributions using Codebookr.

## PHI Identification and Grouping

All patient identifiers were isolated, so that we could block summary statistics from potentially revealing PHI.

```{r}
pt_name_vars <- ms_data %>%
  select(pt_name_full, pt_name_first, pt_name_middle, pt_name_last) %>%
  names()

pt_addr_vars <- ms_data %>%
  select(pt_address_num, pt_address_street, pt_address_unit, pt_address_pobox, 
         pt_address_city, pt_address_state, pt_address_zip) %>%
  names()

pt_dob_vars <- ms_data %>%
  select(pt_dob, pt_dob_year, pt_dob_month, pt_dob_day) %>%
  names()

pt_rec_ids <- ms_data %>%
  select(response_pcr, response_num) %>%
  names()

report_num_vars <- ms_data %>%
  select(detect_report_num, comp_report_num) %>%
  names()


other_phi_vars <- ms_data %>%
  select(detect_report_comment, response_dt, comp_report_created_dt,
         comp_report_comment, response_ems_epcr_sig, response_symptoms) %>%
  names()

phi_vars <- ms_data %>%
  select(all_of(pt_name_vars), pt_dob, all_of(pt_rec_ids), pt_address_num, 
         pt_address_street, pt_address_unit, pt_address_pobox,
         pt_address_zip, pt_address_city, response_date, comp_report_date,
         comp_report_created_date, all_of(report_num_vars), 
         all_of(other_phi_vars)
         )%>%
  names()
```

## Source Data Set Modification

We grouped our variables based on the Source of the Data: "MedStar ePCR Data", "MedStar Compliance Data", and "DETECT Tool Questionnaire (MedStar ePCR Data)"

```{r}
epcr_vars <- ms_data %>%
  select(ms_id, ms_epcr_row, pt_name_full, pt_name_first, pt_name_middle, 
         pt_name_last, pt_age, pt_dob, pt_dob_year, pt_dob_month, pt_dob_day, 
         pt_race, pt_hispanic, pt_gender, pt_homeless, pt_address_pobox, 
         pt_address_num, pt_address_street, pt_address_unit, pt_address_city, 
         pt_address_state, pt_address_zip, response_pcr, response_num, 
         response_dt, response_year, response_month, response_day, 
         response_date, response_time, response_complaint, response_symptoms, 
         response_dispo, response_ems_epcr_sig) %>%
  names() 
  
comp_vars <- ms_data %>%
  select(ms_comp_row, comp_report_agency, comp_report_date, comp_report_method, 
         comp_report_num, comp_report_created_dt, comp_report_created_date, 
         comp_report_created_time, comp_report_comment,
         comp_report_num_list, comp_report_created_list) %>%
  names()
  
detect_q_vars <- ms_data %>%
  select(detect_cond_anxious, detect_cond_hygiene, detect_cond_needs, 
         detect_cond_clothes, detect_meds_difficulty, detect_meds_hoarding, 
         detect_caregiver_anxious, detect_caregiver_frustrated, 
         detect_caregiver_lack, detect_caregiver_inattentive, 
         detect_env_isolated, detect_env_concern, detect_env_hoarding, 
         detect_env_odor) %>%
  names()

detect_vars <- ms_data %>%
   select(all_of(detect_q_vars), detect_report_made, detect_report_num, 
         detect_report_comment, detect_report_aps_unable, 
         detect_report_aps_onscene, detect_report_aps_existing, detect_facility, 
         detect_other_reporter, detect_uta) %>%
  names()
```

And we used this to modify the source of these variables in aggregate

```{r}
for (i in epcr_vars) {
  attr(ms_data[[i]], "source") <- "MedStar ePCR Data"
}

for (i in comp_vars) {
  attr(ms_data[[i]], "source") <- "MedStar Compliance Data"
}

for (i in detect_vars) {
  attr(ms_data[[i]], "source") <- "DETECT Tool Questionnaire (MedStar ePCR Data)"
}
```

## Name Variables

Variables which contained Name values were modified in aggregate.

```{r}
for (i in c(pt_name_vars, "response_ems_epcr_sig")) {
  attr(ms_data[[i]], "col_type") <- "Name"
}
```

## Address Variables

Variables which contained Address values were modified in aggregate.

```{r}
for (i in pt_addr_vars) {
  attr(ms_data[[i]], "col_type") <- "Address"
}
```

## Record or Report Number Variables

Variables which contained Record or Report Number values were modified in aggregate.

```{r}
for (i in c(pt_rec_ids, "ms_epcr_row", "ms_comp_row")) {
  attr(ms_data[[i]], "col_type") <- "Record Number"
}

for (i in report_num_vars) {
  attr(ms_data[[i]], "col_type") <- "Report Number"
}
```

## Question Types

Variables were grouped based on the type of question/response that a variable represented: "Binary Category" and "Single Choice, Multiple Options"

```{r}
binary_vars <- ms_data %>%
  select(pt_hispanic, pt_homeless, pt_gender, comp_report_agency) %>%
  names()

single_choice <- ms_data %>%
  select(all_of(detect_q_vars), pt_race, response_complaint, response_dispo) %>%
  names()
```

The column types of these variables were modified accordingly.

```{r}
for (i in binary_vars) {
  attr(ms_data[[i]], "col_type") <- "Binary Category"
}

for (i in single_choice) {
  attr(ms_data[[i]], "col_type") <- "Single Choice, Multiple Options"
}
```

## Skip Patterns

### DETECT Comment Variables

The DETECT variables which were generated based on comment data were identified, and skip pattern data applied in aggregate

```{r}
detect_inf <- ms_data %>%
  select(detect_report_aps_unable, detect_report_aps_existing, 
         detect_report_aps_onscene, detect_facility, detect_uta, 
         detect_other_reporter) %>%
  names()

for (i in detect_inf) {
  attr(ms_data[[i]], "skip_pattern") <- "Values were not entered in observations that lacked data in the Report Number field of the ePCR data"
}
```

### Compliance Data

All variables in the Compliance data, except for the comment variable, are only absent in the aggregate data if there was not a matched observation found in the compliance data. We added our skip-pattern to these variables accordingly

```{r}
for (i in comp_vars[comp_vars != "comp_report_comment"]) {
  attr(ms_data[[i]], "skip_pattern") <- "Missing values indicate that data for a given observation did not match any value in the Compliance data set"
}

```

# Individual Modifications

```{r}
#| message: false

ms_data <- ms_data %>%
  cb_add_col_attributes(
    ms_id,
    col_type = "Unique Subject ID",
    description = "Unique subject ID created from probabilistic matching using fastLink, manual cleaning"
  ) %>%
  cb_add_col_attributes(
    ms_epcr_row,
    description = "Identifies row number of the observation in original MedStar ePCR data set"
  ) %>%
  cb_add_col_attributes(
    ms_comp_row,
    description = "Identifies row number of the observation in the original MedStar Compliance data set"
  ) %>%
  cb_add_col_attributes(
   pt_name_full,
   description = "Patient's full name (First Middle Last)"
  ) %>%
  cb_add_col_attributes(
    pt_name_first,
    description = "Patient's first name as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_name_middle,
    description = "Patient's middle name as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_name_last,
    description = "Patient's last name as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_age,
    col_type = "Age",
    description = "Patient's Age as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_dob,
    col_type = "Date of Birth",
    description = "Patient's date of birth as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_dob_year,
    col_type = "Year",
    description = "Patient's year of birth as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_dob_month,
    col_type = "Month",
    description = "Patient's month of birth as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_dob_day,
    col_type = "Day",
    description = "Patient's day of birth as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_race,
    col_type = "Single Choice, Multiple Options",
    description = "Patient's race as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    pt_hispanic,
    description = "Patient's ethnic group based on endorsement of Hispanic/Latino heritage in EMS ePCR",
    skip_pattern = "No value entered if no racial information was provided in EMS ePCR"
  ) %>%
  cb_add_col_attributes(
    pt_gender,
    description = "Patient's gender as entered by EMS, based on binary 'MALE/FEMALE' classification"
  ) %>%
  cb_add_col_attributes(
    pt_homeless,
    description = "Indicates if the data in original values for Patient's Address or Comments entered by EMS staff in the Report Number field of the ePCR indicated that patient was 'Homeless' or 'Transient'",
    skip_pattern = "No value entered if there was not information for patient address or report comments in ePCR"
  ) %>%
  cb_add_col_attributes(
    pt_address_pobox,
    description = "PO BOX information that was provided as the patient's address in the ePCR"
  ) %>%
  cb_add_col_attributes(
    pt_address_num,
    description = "Street number of Patient Address, contains letters and numbers
    For an address of 123 Example St #45, City, TX, 77054 the Address Number would be '123'"
  ) %>%
  cb_add_col_attributes(
    pt_address_street,
    description = "Street Name of Patient Address
    For an address of 123 Example St #45, City, TX, 77054 the Street Name would be 'Example St'",
    skip_pattern = "Intersections and values relating to either an 'Unknown' address or that the patient was Homeless/Transient were converted to missing values"
  ) %>%
  cb_add_col_attributes(
    pt_address_unit,
    description = "Unit Number of Patient Address
    For an address of 123 Example St #45, City, TX, 77054 the Unit Number would be '45'"
  ) %>%
  cb_add_col_attributes(
    pt_address_city,
    description = "City of Patient Address
    For an address of 123 Example St #45, City, TX, 77054 the City would be 'City'"
  ) %>%
  cb_add_col_attributes(
    pt_address_state,
    description = "Two-letter state abbreviation of the State of Patient Address, with two-letter country prefix
    For an address of 123 Example St #45, City, TX, 77054 the City would be 'US-TX'"
  ) %>%
  cb_add_col_attributes(
    pt_address_zip,
    description = "Zip Code of Patient Address
    For an address of 123 Example St #45, City, TX, 77054 the City would be '77054'"
  ) %>%
  cb_add_col_attributes(
    detect_cond_anxious,
    description = "Does the patient or older adult appear depressed, anxious, or emotionally distressed for reasons other than their immediate medical condition?"
  ) %>%
  cb_add_col_attributes(
    detect_cond_hygiene,
    description = "Does the patient or older adult have poor personal hygiene (including soiled in urine or feces)?"
  ) %>%
  cb_add_col_attributes(
    detect_cond_needs,
    description = "Does the patient or older adult have unmet needs for assistance with eating, toileting, transferring, dressing, or bathing?"
  ) %>%
  cb_add_col_attributes(
    detect_cond_clothes,
    description = "Is the patient or older adult inadequately clothed or wearing dirty, torn, or soiled clothing?"
  ) %>%
  cb_add_col_attributes(
    detect_meds_difficulty,
    description = "Does the patient or older adult have difficulties taking their prescribed medications as directed?"
  ) %>%
  cb_add_col_attributes(
    detect_meds_hoarding,
    description = "Does the patient or older adult appear to be hoarding or saving old medications?"
  ) %>%
  cb_add_col_attributes(
    detect_caregiver_anxious,
    description = "If a caregiver is present, they appear overly concerned (eg, anxious, hovering)"
  ) %>%
  cb_add_col_attributes(
    detect_caregiver_frustrated,
    description = "If a caregiver is present, they appear frustrated, tired, angry, or burdened by the patient or older adult"
  ) %>%
  cb_add_col_attributes(
    detect_caregiver_lack,
    description = "If caregiver present, they appear to lack knowledge of the patient or older adult's medical needs"
  ) %>%
  cb_add_col_attributes(
    detect_caregiver_inattentive,
    description = "If a caregiver is present, they appear unengaged and inattentive in caring for the patient or older adult"
  ) %>%
  cb_add_col_attributes(
    detect_env_isolated,
    description = "Is the patient or older adult isolated in the home?"
  ) %>%
  cb_add_col_attributes(
    detect_env_concern,
    description = "Living environment poses a health or safety concern (eg, fire hazard, insect or rodent infestation, or urine or feces present)"
  ) %>%
  cb_add_col_attributes(
    detect_env_hoarding,
    description = "Inside of the home is in extreme disarray or there is hoarding"
  ) %>%
  cb_add_col_attributes(
    detect_env_odor,
    description = "Unusual odor (eg, urine, feces)"
  ) %>%
  cb_add_col_attributes(
    detect_report_made,
    description = "Was an APS Report made?"
  ) %>%
  cb_add_col_attributes(
    detect_report_num,
    description = "APS Report number recorded by EMS in the DETECT Tool",
    skip_pattern = "Entries which did not have a number, but only a comment, were shifted to another variable and replaced with missing values"
  ) %>%
  cb_add_col_attributes(
    detect_report_comment,
    col_type = "Comments by EMS personnel",
    description = "Any content in the Report Number field that was not a report number"
  ) %>%
  cb_add_col_attributes(
    detect_report_aps_unable,
    description = "Comments by EMS in the Report Number field indicated they were unable to reach APS to file a report"
  ) %>%
  cb_add_col_attributes(
    detect_report_aps_onscene,
    description = "Comments by EMS in the Report Number field indicated that APS was already on scene with the patient"
  ) %>%
  cb_add_col_attributes(
    detect_report_aps_existing,
    description = "Comments by EMS in the Report Number field indicated their belief APS was already aware, or they were provided a report number by another party"
  ) %>%
  cb_add_col_attributes(
    detect_facility,
    description = "Comments by EMS in the Report Number field indicated a report was not filed because the patient was in the care of a facility such as a Nursing Home"
  ) %>%
  cb_add_col_attributes(
    detect_other_reporter,
    description = "Comments by EMS in the Report Number field indicated a report was not filed by EMS due to the belief another party, such as hospital staff or a social worker, would file a report"
  ) %>%
  cb_add_col_attributes(
    detect_uta,
    description = "Comments by EMS in the Report Number field indicated they were unable to use the DETECT tool as the patient was in a public location, or lived in a separate location from the encounter"
  ) %>%
  cb_add_col_attributes(
    response_pcr,
    description = "Unique PCR number for the encounter, identifying the unique patient care record"
  ) %>%
  cb_add_col_attributes(
    response_num,
    description = "Response number for the incident assigned through EMS dispatch - each dispatch incident potentially has more than one patient"
  ) %>%
  cb_add_col_attributes(
    response_dt,
    col_type = "Date and Time",
    description = "Date and Time of the EMS response"
  ) %>%
  cb_add_col_attributes(
    response_year,
    col_type = "Year",
    description = "Year of the EMS Response"
  ) %>%
  cb_add_col_attributes(
    response_month,
    col_type = "Month",
    description = "Month of the EMS Response"
  ) %>%
  cb_add_col_attributes(
    response_day,
    col_type = "Day",
    description = "Day of the EMS Response"
  ) %>%
  cb_add_col_attributes(
    response_time,
    col_type = "Time - Hour:Minute:Second",
    description = "Time of the EMS Response"
  ) %>%
  cb_add_col_attributes(
    response_complaint,
    description = "Chief complaint of original incident dispatch"
  ) %>%
  cb_add_col_attributes(
    response_symptoms,
    description = "Symptoms associated with the incident as entered by EMS"
  ) %>%
  cb_add_col_attributes(
    response_dispo,
    description = "Disposition/Resolution code of incident"
  ) %>%
  cb_add_col_attributes(
    response_ems_epcr_sig,
    description = "Name entered into signature box by EMS personnel, intended to capture the name of the EMS provider associated with the call"
  ) %>%
  cb_add_col_attributes(
    comp_report_agency,
    col_type = "Agency Abbreviation",
    description = "Agency to which a report was made"
  ) %>%
  cb_add_col_attributes(
    comp_report_date,
    col_type = "Date",
    description = "Date of the patient encounter that the report referenced"
  ) %>%
  cb_add_col_attributes(
    comp_report_num,
    col_type = "Report Number",
    description = "Report confirmation number provided by the receiving agency"
  ) %>%
  cb_add_col_attributes(
    comp_report_created_dt,
    col_type = "Date and Time",
    description = "Date and time the report was made"
  ) %>%
  cb_add_col_attributes(
    comp_report_created_date,
    col_type = "Date",
    description = "Date the report was made"
  ) %>%
  cb_add_col_attributes(
    comp_report_created_time,
    col_type = "Time - Hour:Minute:Second",
    description = "Time the report was made"
  ) %>%
  cb_add_col_attributes(
    comp_report_comment,
    col_type = "Comments by Compliance Personnel",
    description = "Any values in the Report Number field that were not report numbers"
  ) %>%
  cb_add_col_attributes(
    comp_report_num_list,
    col_type = "List",
    description = "List of all Report Numbers in the Compliance Data for the same Response Number; codebook summary statistics provided based on the length of the list"
  ) %>%
  cb_add_col_attributes(
    comp_report_created_list,
    col_type = "List",
    description = "List of all Report Creation Date/Time values in the Compliance Data for the same Response Number; codebook summary statistics provided based on the length of the list"
  )
```

# Codebook Generation

We generated our codebook, with title, subtitle, and description. We blocked summary statistics on our PHI fields.

```{r}
#| message: false

book <- codebook(
  df = ms_data,
  title = "DETECT MedStar EMS Data",
  subtitle = "February 2017 - February 2018",
  description = "In collaboration with MedStar Mobile Healthcare (https://www.medstar911.org/).
  Data was originally collected during the course of MedStar operations from February 2017 - February 2018 as part of the Detection of Elder abuse Through Emergency Care Technicans (DETECT) screening tool pilot project (doi: 10.1080/08946566.2018.1564104).
  Both MedStar electronic Patient Care Record (ePCR) data and MedStar Compliance data was utilized for this data set. 
  The DETECT screening tool, made available on MedStar ePCR systems when MedStar EMS personnel encountered patients 65 years of age or older. MedStar Mobile Healthcare operations covered both 911 and interfacility calls for service within the Dallas-Fort Worth Metroplex in the State of Texas, with primary coverage in the Fort Worth region.",

  no_summary_stats = phi_vars,
  keep_blank_attributes = FALSE)
```

# Exporting Codebook to DOCX Format

```{r}
print(book, here("docs", "codebooks", "medstar_codebook_01.docx"))
```
